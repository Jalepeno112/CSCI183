)
glm(formula, data=df.train, family = binomial)
fit <- glm(formula, data=df.train, family = binomial)
df.test <- read.csv(file="test.csv")
predictions <- predict(fit, df.test,type="response")
predictions
survival.submission <- data.frame(srch_id=df.test$srch_id, booking_bool=predictions)
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
colnames(df.test)
lenght(unique(df.test$prop_id))
length(unique(df.test$prop_id))
length(unique(df.test$srch_id))
survival.submission <- data.frame(srch_id=df.test$prop_id, booking_bool=predictions)
head(df.test)
survival.submission <- data.frame(srch_id=paste(df.test$srch_id,df.test$prop_id,"-"), booking_bool=predictions)
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
survival.submission <- data.frame(srch_id=paste(df.test$srch_id,df.test$prop_id,"."), booking_bool=predictions)
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
survival.submission <- data.frame(srch_id=paste(df.test$srch_id,df.test$prop_id,sep="-"), booking_bool=predictions)
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
source('~/CSCI 183/Expedia/hw3.R')
predictions <- predict(fit1, df.test, type="raw")
head(predictions)
survival.submission <- data.frame(srch_id=paste(df.test$srch_id,df.test$prop_id,sep="-"), booking_bool=predictions)
surivival.colnames
colnames(survival)
colnames(survival.submission)
colnames(survival.submission) <- c("srch-prop_id","booking_bool")
colnames(survival.submission)
survival.submission$srch-prop_id
survival.submission[["srch-prop_id"],]
survival.submission[["srch-prop_id"]]
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
survival.submission = NULL
survival.submission <- data.frame("srch-prop_id" = paste(df.test$srch_id, df.test$prop_id, sep="-"), booking_bool = predictions)
colnames(survival.submission)
colnames(survival.submission) <- c("srch-prop_id", "booking_bool")
colnames(survival.submission)
survival.submission[["srch_prop-id"]]
survival.submission[["srch_prop-id"],]
survival.submission[["srch-prop_id"]]
survival.submission[["srch_prop-id"],]
survival.submission[,["srch_prop-id"]]
head(df.test)
which(is.na(df.test))
which(df.test[df.test$prop_starrating == 0])
df.test$prop_starrating == 0
df.test[df.test$prop_starrating == 0]
df.test[,df.test$prop_starrating == 0]
df.test[df.test$prop_starrating == 0, ]
length(df.test[df.test$prop_starrating == 0, ])
length(df.test[df.test$prop_review_score == 0, ])
df.test[df.test$prop_review_score == 0, ]
which(df.test[df.test$prop_review_score == 0, ])
which(df.test$prop_review_score == 0)
no_review_score <- which(df.test$prop_review_score ==0)
no_star_rating <- which(df.test$prop_starrating == 0)
diff(no_review_score,no_star_rating)
no_review_score[!no_star_rating]
no_review_score != no_star_rating
len(no_review_score)
lenght(no_review_score)
length(no_review_score)
no_review_score
no_review_score[no_review_score == FALSE]
source('~/CSCI 183/Expedia/hw3_exploratoryAnalysis.R')
booked.grouped.byPromotionFlag
print(ggplot(data=booked.grouped.byPromotionFlag,
aes(x=promotion_flag, fill=factor(percent_booked), y = srch_id)) +
geom_bar(stat='identity')+
ggtitle("Booking Rate by Promotion Flag"))
print(ggplot(data=booked.grouped.byPromotionFlag,
aes(x=promotion_flag, fill=factor(promotion_flag), y = percentBooked)) +
geom_bar(stat='identity')+
ggtitle("Booking Rate by Promotion Flag"))
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
survival.submission = data.frame(srch_id = paste(df.test$srch_id,df.test$prop_id,sep="-"),
booking_bool = predicitons)
colnames(survival.submission) <- c("srch-prop_id", "booking_bool")
install("pRoc")
install.packages("prco")
install.packages("pROC")
ROC1 <- roc(df.train$booking_bool, survival.submission$booking_bool)
library("pRoc")
library("pROC")
ROC1 <- roc(df.train$booking_bool, survival.submission$booking_bool)
length(df.train$booking_bool)
length(survival.submission$booking_bool)
df.train.test <- df.train[-train_ind]
length(df.train.test)
lengt(df.train)
length(df.train)
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
data(df.train)
data(train.raw)
data("train.raw")
head(train.raw)
data(train.raw)
View(train.raw)
data(train.raw)
?data
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
ROC1
View(df.train)
fitControl
ROC1 <- roc(df.test$booking_bool, df.test$predictions, data=df.test)
ROC1 <- roc(booking_bool,
predictions, data=df.test)
colnames(df.test)
.GlobalEnv
.GlobalEnv()
data(train.raw, env=.GlobalEnv)
data(train.raw, envir = =.GlobalEnv)
data(train.raw, envir =.GlobalEnv)
roc.default(booking_bool,predictions,data=df.test)
data(df.test)
data('df.test')
colnames(df.test)
?roc
roc(predictions, booking_bool, df.test)
roc(predictions, booking_bool, data=df.test)
data(df.test)
?data
data(df.test, verbose=TRUE)
data(df.test, verbose=TRUE, envir = .GlobalEnv)
t <- df.test
data(t)
data(df.test)
nrow(train.raw)
train.raw$price_category <- cut(train.raw$price,
c(0,100,200,300,400,500,600,700,800,900,
1000,1100,1500,1600,max(train.raw$price_usd)))
#data(train.raw)
max(train.raw$price_usd)
train.raw$price_category <- cut(train.raw$price_usd,
c(0,100,200,300,400,500,600,700,800,900,
1000,1100,1500,1600,max(train.raw$price_usd)))
data(train.raw)
data(train.raw, envir=.GlobalEnv)
data(train.raw$booking_bool, envir=.GlobalEnv)
save(train.raw, file="train.raw.rda")
data(train.raw.rda)
data("train.raw.rda")
data(file="train.raw.rda")
GlobalEnb
.GlobalEnv
.GlobalEnv$df.train
cls
library("pROC")
ROC1 <- roc(df.test$booking_bool, df.test$predicitons)
print(plot(ROC1), col='blue')
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
ROC1 <- roc(df.test$booking_bool, df.test$predictions)
df.test
ROC1
ROC1 <- roc(df.test$booking_bool, df.test$predictions)
source('~/CSCI 183/RandomForestInClassTitanic/hw3_test.R')
source('~/CSCI 183/Expedia/hw3_test.R')
df.test
data(df.test)
ROC1 <- roc(df.test$booking_bool, df.test$predictions)
df.test$predicitons
fit1
ROC1 <- roc(df.test$booking_bool ~df.test$predictions, data=df.test)
ROC1 <- roc(booking_bool ~ predictions, data=df.test)
ROC1 <- roc(df.test$booking_bool ~df.test$predictions)
is.na(df.test$predicitons)
which(is.na(df.test$predicitons))
ROC1 <- roc(booking_bool ~ predictions, data=df.test)
ROC1 <- roc(df.test$booking_bool ~df.test$predictions)
ROC1 <- roc(df.test$booking_bool ~ df.test$predictions)
ROC1 <- roc(df.test$booking_bool ~df.test$predictions)
ROC1 <- roc(df.test$booking_bool ~ df.test$predictions)
library("pROC")
ROC1 <- roc(df.test$booking_bool ~ df.test$predictions)
ROC1 <- roc(df.test$booking_bool ~ df.test$predictions)
ROC1 <- roc(df.test$booking_bool, df.test$predictions)
length(df.test$booking_bool)
length(df.test$predicitons)
which(is.na(df.test$predicitons))
which(df.test$predicitons == NULL)
ROC1 <- roc(predictor = df.test$booking_bool, response =df.test$predicitons)
print(plot(ROC1), col='blue')
AUC <- auc(ROC1)
AUC
source('~/CSCI 183/Expedia/hw3_test.R')
ROC1 <- roc(predictor = df.test$booking_bool, response = df.test$predictions)
df.test$predictions <- predicitons
ROC1 <- roc(predictor = df.test$booking_bool, response = df.test$predictions)
print(plot(ROC1), col='blue')
source('~/CSCI 183/Expedia/hw3_test.R')
ROC1 <- NULL
ROC1 <- roc(predictor = df.test$booking_bool, response = df.test$predictions)
print(plot(ROC1), col='blue')
head(df.test$predictions)
head(df.test$booking_bool)
df.test$booking_bool
colnames(df.test)
ROC1 <- roc(df.test$booking_bool, df.test$predictions)
ROC1
print(ROC1)
print(plot(ROC1))
source('~/CSCI 183/Expedia/hw3.R')
survival.submission <- data.frame(srch_id = paste(df.test$srch_id,df.test$prop_id,sep="-"),
booking_bool = predicitons)
colnames(survival.submission) <- c("srch-prop_id", "booking_bool")
#write to csv
write.csv(survival.submission,file="Predictions.csv",row.names=FALSE)
test.raw <- read.csv(file="test.csv")
head(test.raw)
test.raw$prop_review_score == 0
no_review_score <- subset(test.raw,test.raw$prop_review_score == 0)
no_star_rating <- subset(test.raw, test.raw$prop_starrating == 0)
source('~/CSCI 183/Expedia/hw3_exploratoryAnalysis.R')
print(ggplot(data=booked.grouped.byPromotionFlag,
aes(x=promotion_flag, fill=factor(percentBooked), y = srch_id)) +
geom_bar(stat='identity')+
ggtitle("Booking Rate by Promotion Flag"))
#number of adults
grouped.byAdultCount <- aggregate(srch_id ~ srch_adults_count, data=df.train, FUN = length)
print(ggplot(data=df.train,
aes(x=srch_adults_count, fill=factor(srch_adults_count))) +
geom_histogram() +
ggtitle("Number of Searches by Promotion Flag")
)
print(ggplot(data=df.train,
aes(x=srch_adults_count, fill=factor(srch_adults_count))) +
geom_histogram() +
ggtitle("Number of Searches by Adults Count")
)
grouped.byAdultCount <- aggregate(srch_id ~ srch_adults_count, data=df.train, FUN = length)
print(ggplot(data=df.train,
aes(x=srch_adults_count, fill=factor(srch_adults_count))) +
geom_histogram(binwidth=1) +
ggtitle("Number of Searches by Adults Count")
)
head(test.raw$srch_adults_count)
booked.grouped.byAdultCount <- aggregate(srch_id~srch_adults_count, data=booked, FUN=length)
booked.grouped.byAdultCount$percentBooked <- booked.grouped.byAdultCount$srch_id/
grouped.byAdultCount$srch_id
booked.grouped.byAdultCount$percentBooked
stdErrorMean(booked.grouped.byAdultCount$percentBooked)
print(ggplot(data=booked.grouped.byAdultCount,
aes(x=srch_adult_count,
fill=factor(srch_adult_count),
y=srch_id))+
geom_bar(stat='identity')+
ggtitle("Booking Rate by Adult Count"))
print(ggplot(data=booked.grouped.byAdultCount,
aes(x=srch_adults_count,
fill=factor(srch_adults_count),
y=srch_id))+
geom_bar(stat='identity')+
ggtitle("Booking Rate by Adult Count"))
print(ggplot(data=booked.grouped.byAdultCount,
aes(x=srch_adults_count,
fill=factor(srch_adults_count),
y=percentBooked))+
geom_bar(stat='identity')+
ggtitle("Booking Rate by Adult Count"))
source('~/CSCI 183/Expedia/hw3_test.R')
stdErrorMean(booked.grouped.byAdultCount$percentBooked)
stdErrorMean(booked.grouped.byPromotionFlag$percentBooked)
no_review_score == no_star_rating
nrows(no_review_score)
nrow(no_review_score)
nrow(no_star_rating)
source('~/CSCI 183/Expedia/hw3_test.R')
View(booked.grouped.byAdultCount)
AUC
formula
write.csv(survival.submission,file="Predictions_test.csv",row.names=FALSE)
source('~/CSCI 183/Expedia/hw3.R')
no_star_rating
head(no_star_rating)
grouped.byBrand <- aggregate(srch_id ~ brand_bool, data=df.train)
grouped.byBrand <- aggregate(srch_id ~ prop_brand_bool, data=df.train)
grouped.byBrand <- aggregate(srch_id ~ prop_brand_bool, data=df.train, FUN = length)
booked.grouped.byBrand <- aggregate(srch_id ~prop_brand_bool, data = booked, FUN = length)
booked.grouped.byBrand$percentBooked <- booked.grouped.byBrand$srch_id/grouped.byBrand$srch_id
booked.grouped.byBrand
grouped.byBrand <- aggregate(srch_id ~ prop_brand_bool, data=df.train, FUN = length)
grouped.byBrand
View(df.train)
View(df.train)
no_star_review <- subset(df.train, df.train$prop_starrating == 0 & df.train$prop_review_score ==0)
no_star_review
length(no_star_review)
length(no_star_rating)
length(no_review_score)
apply(X = df.train,MARGIN = c(1,1),FUN = sum(x))
apply(X = df.train,MARGIN = c(1,1),FUN = sum(X))
apply(X = df.train,MARGIN = 1,FUN = sum(X))
apply(df.train,MARGIN = 1,FUN = sum(x))
sapply(df.train,FUN=sum)
sapply(df.train,FUN=mean)
mean(df.train$srch_id)
apply(df.train,MARGIN=1, fun=mean)
apply(df.train,MARGIN=1, FUN=mean)
apply(df.train$srch_id,MARGIN=1, FUN=mean)
lapply(df.train$srch_id, FUN=mean)
sapply(df.train$srch_id, FUN=mean)
mean(2,3)
mean([2,3])
mean(c(2,3)
)
reviewsImpute <- function(x, review_mean, star_mean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(x$prop_starrating == 0 & x$prop_review_score==0) {
return mean(c(review_mean,star_mean))
}
else if(x$prop_review_score==0) {
return x$prop_starrating
}
else{
return x$prop_review_score
}
}
reviewsImpute <- function(x, review_mean, star_mean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(x$prop_starrating == 0 & x$prop_review_score==0) {
return mean(c(review_mean,star_mean))
}
else if(x$prop_review_score==0) {
return (x$prop_starrating)
}
else{
return (x$prop_review_score)
}
}
reviewsImpute <- function(x, review_mean, star_mean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(x$prop_starrating == 0 & x$prop_review_score==0) {
return (mean(c(review_mean,star_mean)))
}
else if(x$prop_review_score==0) {
return (x$prop_starrating)
}
else{
return (x$prop_review_score)
}
}
reviews <- apply(df.train, MARGIN = 1, FUN=reviewImpute)
reviews <- apply(df.train, MARGIN = 1, FUN=reviewsImpute)
reviews <- apply(df.train, MARGIN = 1, function(x) reviewsImpute(x))
df.train$prop_starrating[df.train$prop_starrating != 0]
star_mean <- mean(df.train$prop_starrating[df.train$prop_starrating != 0])
review_mean <- mean(df.train$prop_review_score[df.train$prop_review_score != 0])
reviews <- apply(df.train, MARGIN = 1, function(x) reviewsImpute(x,review_mean,star_mean))
reviews <- apply(df.train, MARGIN = 1, function(x) reviewsImpute(x['prop_review_score'],x['prop_starrating'],review_mean,star_mean))
starRatingsMean <- mean(c(star_mean,review_mean))
reviewsImpute <- function(reviews,stars, starRatingsMean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(stars == 0 & reviews ==0) {
return (starRatingsMean)
}
else if(reviews==0) {
return (stars)
}
else{
return (reviews)
}
}
ratingsImpute <-function(reviews, stars, starRatingsMean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(reviews == 0 & stars ==0) {
return (starRatingsMean)
}
else if(stars ==0) {
return reviews
}
else{
return strs
}
}
reviewsImpute <- function(reviews,stars, starRatingsMean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(stars == 0 & reviews ==0) {
return (starRatingsMean)
}
else if(reviews==0) {
return (stars)
}
else{
return (reviews)
}
}
ratingsImpute <-function(reviews, stars, starRatingsMean) {
#x:           row from a dataframe
#review_mean: the mean of all non-zero review entries
#star_mean:   the mean of all non-zero starrating entries
if(reviews == 0 & stars ==0) {
return (starRatingsMean)
}
else if(stars ==0) {
return (reviews)
}
else{
return (stars)
}
}
reviews <- apply(df.train[,c('prop_review_score,prop_starrating')], MARGIN = 1, function(x) reviewsImpute(x['prop_review_score'],x['prop_starrating'],starRatingsMean))
reviews <- apply(df.train[,c('prop_review_score','prop_starrating')], MARGIN = 1, function(x) reviewsImpute(x['prop_review_score'],x['prop_starrating'],starRatingsMean))
reviews
length(reviews)
reviews[9985]
df.train$prop_review_score[9985]
df.train$prop_review_score <- reviews
df.train$prop_starrating <- apply(df.train[, c('prop_review_score', 'prop_starrating')],
MARGIN = 1, function(x) ratingsImpute(x['prop_review_score'], x['prop_starrating'], starRatingsMean))
subset(df.train, df.train$prop_starrating == 0)
source('~/CSCI 183/Expedia/hw3_test.R')
cls
source('~/CSCI 183/Expedia/hw3_test.R')
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3_test.R')
source('~/CSCI 183/Expedia/hw3.R')
colnames(df.train)
nrow(subset(df.train,is.na(df.train$visitor_hist_starrating)))
nrow(subset(df.train,df.train$visitor_hist_starrating==0))
nrow(subset(df.train,df.train$visitor_hist_starrating==0))/nrow(df.train)
nrow(subset(df.test$prop_starrating == 0))
nrow(subset(df.test, df.test$prop_starrating == 0))
nrow(subset(df.test, df.test$prop_review_score == 0))
head(df.test$prop_review_score)
clear
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3_exploratoryAnalysis.R')
source('~/.active-rstudio-document')
source('~/CSCI 183/Expedia/hw3_exploratoryAnalysis.R')
colnames(df.train)
head(df.train$prop_location_score1)
head(df.train$prop_location_score2)
ggplot(data=df.train, aes(x=prop_location_score1)) + geom_histogram()
ggplot(data=df.train, aes(x=prop_location_score1)) + geom_histogram(binwidth=1)
df.train$prop_location_score1_category = cut(df.train$prop_location_score1,
seq(0,8))
df.train$prop_location_score1_category <- cut(df.train$prop_location_score1,
seq(0,8))
head(df.train$prop_location_score1_category)
ggplot(data=df.train,aes(x=prop_location_score1_category, fill=prop_location_score1_category)) + geom_histogram()
df.train$prop_location_score1_category = cut(df.train$prop_location_score1,
seq(0,10))
ggplot(data=df.train,aes(x=prop_location_score1_category, fill=prop_location_score1_category)) + geom_histogram()
booked$prop_location_score1_category <- cut(booked$prop_location_score1, seq(0,10))
booked.grouped.byPropLocation1 <- aggregate(srch_id ~ prop_location_score1, data=booked, FUN=length)
booked.grouped.byPropLocation1 <- aggregate(srch_id ~ prop_location_score1_category, data=booked, FUN=length)
booked.grouped.byPropLocation1
grouped.byPropLocation1 <- aggregate(srch_id ~prop_location_score1_category, data=df.train, FUN = length)
booked.grouped.byPropLocation1$percentBooked <- booked.grouped.byPropLocation1$srch_id/grouped.byPropLocation1$srch_id
ggplot(data=booked.grouped.byPropLocation1, aes(x=prop_location_score1_category,
fill=prop_location_score1_category,
y=srch_id)) +
geom_bar(stat='identity')
ggplot(data=booked.grouped.byPropLocation1, aes(x=prop_location_score1_category,
fill=prop_location_score1_category,
y=percentBooked)) +
geom_bar(stat='identity')
stdErrorMean(booked.grouped.byPropLocation1)
stdErrorMean(booked.grouped.byPropLocation1$percentBooked)
df.train$prop_location_score1_category <- cut(df.train$prop_location_score1,
c(-Inf,0:10))
booked$prop_location_score1_category <- cut(booked$prop_location_score1, c(-Inf,0:10))
booked.grouped.byPropLocation1 <- aggregate(srch_id ~ prop_location_score1_category, data=booked, FUN=length)
grouped.byPropLocation1 <- aggregate(srch_id ~prop_location_score1_category, data=df.train, FUN = length)
booked.grouped.byPropLocation1$percentBooked <- booked.grouped.byPropLocation1$srch_id/grouped.byPropLocation1$srch_id
booked.grouped.byPropLocation1
stdErroMean(booked.grouped.byPropLocation1$percentBooked)
stdErrorMean(booked.grouped.byPropLocation1$percentBooked)
source('~/CSCI 183/Expedia/hw3_test.R')
source('~/CSCI 183/Expedia/hw3_exploratoryAnalysis.R')
grouped.byChildrenCount <- aggregate(srch_id ~ srch_children_count, data=df.train, FUN=length)
booked.grouped.byChildrenCount <- aggregate(srch_id ~srch_children_count, data=booked,FUN = length)
grouped.byChildrenCount
booked.grouped.byChildrenCount$percentBooked <- booked.grouped.byChildrenCount$srch_id/grouped.byChildrenCount$srch_id
booked.grouped.byChildrenCount$percentBooked <- percentBooked(booked.grouped.byChildrenCount, grouped.byChildrenCount, "srch_id", "srch_children_count")
booked.grouped.byChildrenCount <- percentBooked(booked.grouped.byChildrenCount, grouped.byChildrenCount, "srch_id", "srch_children_count")
booked.grouped.byChildrenCount
booked.grouped.byChildrenCount = NULL
booked.grouped.byChildrenCount <- aggregate(srch_id ~srch_children_count, data=booked,FUN = length)
booked.grouped.byChildrenCount <- percentBooked(booked.grouped.byChildrenCount, grouped.byChildrenCount, "srch_id", "srch_children_count")
booked.grouped.byChildrenCount
stdErrorMean(booked.grouped.byChildrenCount$percentBooked)
print(ggplot(data=booked.grouped.byChildrenCount,
aes(x=srch_children_count,
fill=factor(srch_children_count),
y=percentBooked))+
geom_bar(stat='identity')+
ggtitle("Booking Rate by Children Count"))
stdErrorMean(booked.grouped.bySite$percentBooked)
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3.R')
source('~/CSCI 183/Expedia/hw3.R')
