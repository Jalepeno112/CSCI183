{
    "contents" : "library(\"doBy\")\nlibrary(\"ggplot2\")\n\n#read data from test files.  Test files are stored locally\n#The general process for loading the data was taken from:\n#   https://github.com/wehrley/wehrley.github.io/blob/master/SOUPTONUTS.md\n#\n#The structure for the rest of the code was influenced by a MATLAB project from a previous class\n#The project was to try and beat Netflix's recommnedation algorithm\n#\n#This solution uses the idea that similar items are rated similarly.\n#If person x lives and their vector is similar to person y, then it is likely that person y also lived\n#We use cosine similarity to determine how similar persons are.\n#\n#NOTE: with movies, the rankings are generally between 0 and 5, but with life and death its between 0 and 1\n\n\n#create function to readData in\nreadData <- function(file.name, column.types, missing.types) {\n  read.csv(file.name, colClasses= column.types, na.strings=missing.types)\n}\n\n#Cosine Similarity function\ncosineSimilarity <- function(passenger.vector, neighbor.vector, columns) {\n  #calculate the cosine similarity between the passenger and the neighbor vectors\n  # :param passenger.vector:  a vector describing a passenger from the test set\n  # :param neighbor.vector:   a vector describing a passenger from the training set\n  # :param columns:           the columns we are using to calculate cosine similarity.\n  \n  \n  #only use the columns in columns\n  neighbor.vector = neighbor.vector[,c(columns)]\n  passenger.vector = passenger.vector[,c(columns)]\n  \n  #filter out NA values.  They do nothing for us.\n  #filter the two vectors down so that each column as a value that is NOT NA\n  passenger.filtered = passenger.vector[,!apply(is.na(passenger.vector),2,all)]\n  neighbor.filtered = neighbor.vector[,c(colnames(passenger.filtered))]\n  \n  print(passenger.filtered)\n  print(neighbor.filtered)\n  print(1/(1+dist(rbind(neighbor.filtered,passenger.filtered))))\n  similarity = 0\n  #calculate cosine similarity\n  if (ncol(passenger.filtered) > 1) {\n    similarity = sum(neighbor.filtered*passenger.filtered)/sqrt(sum(neighbor.filtered^2)*sum(passenger.filtered^2))\n  }\n  else if(ncol(passenger.filtered == 1)){\n    #if there is only 1 co-marked item, then cosine similarity will always return 1\n    #use Euclidean Distance instead\n    similarity = 1/(1+dist(rbind(neighbor.filtered,passenger.filtered)))\n      \n  }\n  return(similarity)\n  \n}\n\n#create Pearson Corellation Function\n\n\n#Load data \n##############################################################\ntrain.data.file <- \"train.csv\"  #training data\ntest.data.file <- \"test.csv\"    #test data\nmissing.types <- c(\"NA\",\"\")     #what to fill for missing types\n\n#define the data types we want to use for each column\ntrain.column.types <- c(\n  'integer',   # PassengerId\n  'factor',    # Survived\n  'numeric',    # Pclass\n  'character', # Name\n  'factor',    # Sex\n  'numeric',   # Age\n  'integer',   # SibSp\n  'integer',   # Parch\n  'character', # Ticket\n  'numeric',   # Fare\n  'character', # Cabin\n  'factor'     # Embarked\n)\n#test data doesn't include the Survived column\ntest.column.types <- train.column.types[-2]\n\n#load data\ntrain.raw <- readData(train.data.file, train.column.types, missing.types)\ntest.raw <- readData(test.data.file,test.column.types,missing.types)\n\ndf.train = train.raw\ndf.test = test.raw\n\n#force some columns from factor to numeric\ndf.train$Sex = as.numeric(df.train$Sex)   #1 = female, 2 = male\ndf.train$Embarked = as.numeric(df.train$Embarked) #1 = C, 2 = Q, 3 = S \n\ndf.test$Sex = as.numeric(df.test$Sex)   #1 = female, 2 = male\ndf.test$Embarked = as.numeric(df.test$Embarked) #1 = C, 2 = Q, 3 = S \n\n#pick out which columns we want to use for cosine similarity\n#the columns we chose are all ones that can be mapped to a value\n#AND seemd to have a good deal of significance on survival\ncolumns = c(\"Pclass\",\"Sex\" ,\"Age\" , \"SibSp\" ,\"Parch\" ,\"Fare\",\"Cabin\",\"Embarked\")",
    "created" : 1428554439317.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "18|62|20|0|\n",
    "hash" : "2570978113",
    "id" : "22A6D2A1",
    "lastKnownWriteTime" : 1428563958,
    "path" : "~/CSCI 183/HW2/hw2.r",
    "project_path" : "hw2.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}