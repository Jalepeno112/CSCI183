neighbor.vector[!non_na]
non_na = intersect(is.na(neighbor_vector), is.na(passenger.vector))
non_na = intersect(is.na(neighbor.vector), is.na(passenger.vector))
non_na
non_na = merge(is.na(neighbor.vector), is.na(passenger.vector))
non_na
is.na(neighbor.vecotr)
is.na(neighbor.vector)
is.na(passenger.vector)
non_na.neighbor = is.na(neighbor.vector)
non_na.passenger = is.na(passenger.vector)
non_na.passenger.PClass
non_na.passenger['PClass']
non_na.passenger
non_na.passenger.colnames
non_na.passenger.colnames()
non_na.passenger$Name
type(non_na.passenger)
typeof(non_na.passenger)
neighbor.vector = head(df.train,2)
neighbor.vector
neighbor.vector[2]
neighbor.vector[2,]
neighbor.vector = neighbor.vector[2,]
non_na.neighbor = is.na(neighbor.vector)
non_na.neighbor
non_na.passenger
merge(non_na.passenger,non_na.neighbor)
intersect(non_na.passenger,non_na.neighbor)
passenger.vector[!non_na.neighbor]
passenger.vector
passenger.vector[!non_na.neighbor]
na.omit(passenger.vector[!non_na.neighbor])
omit = na.omit(passenger.vector[!non_na.neighbor])
omit
omit[1]
omit[1:7]
omit = na.omit(passenger.vector[!"Name"])
omit = na.omit(passenger.vector[,c("Name")])
omit
non_na = is.na(neighbor.vector)
passenger.filtered = na.omit(passenger.vector[!non_na])
passenger.filtered = passenger.filtered[,c(columns)]
columns = colnames(passenger.filtered)
columns = colnames(passenger.vector)
columns
non_na = is.na(neighbor.vector)
passenger.filtered = na.omit(passenger.vector[!non_na])
passenger.filtered = passenger.filtered[,c(columns[1:2])]
non_na = is.na(neighbor.vector)
passenger.filtered = na.omit(passenger.vector[!non_na])
passenger.filtered = passenger.filtered[,c(columns[1:2])]
c(coulmns[1:2])
c(columns[1:2])
passenger.filtered
passenger.filtered.colnames = columns
passenger.filtered
!apply(is.na(passenger.vector),2,all)
!apply(is.na(passenger.vector),2,all)
passenger.vector
passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.vector[,c(colnames(passenger.vector[,!apply(is.na(passenger.vector),2,all)]))]
neighbor.filtered = neighbor.vector[,!apply(is.na(neighbor.vector),2,all)]
passenger.filtered = passenger.filtered[,c(colnames(neighbor.filtered))]
> neighbor.filtered = neighbor.vector[,!apply(is.na(neighbor.vector),2,all)]
neighbor.filtered = neighbor.vector[,!apply(is.na(neighbor.vector),2,all)]
neighbor.filtered
passenger.filtered = passenger.vector[,c(colnames(neighbor.filtered))]
neighbor.filtered = neighbor.vector[,!apply(is.na(neighbor.vector),2,all)]
passenger.filtered = passenger.vector[,c(colnames(neighbor.filtered))]
passenger.filtered = passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered = neighbor.vector[,c(colnames(passenger.filtered))]
neighbor.filtered
passenger.filtered
similarity = sum(neighbor.filtered*passenger.filtered)/sqrt(sum(neighbor.filtered^2)*sum(passenger.filtered^2))
columns = c("Pclass", "Sex", "Age", "Sibsp", "Parch", "Fare", "Embarked")
source('~/.active-rstudio-document')
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity
cosineSimilarity(passenger.vector,neighbor.vector,columns)
cosineSimilarity
cosineSimilarity
cosineSimilarity(passenger.vector,neighbor.vector,columns)
passenger.vector = head(df.test,1)
neighbor.vector = head(df.train,1)
cosineSimilarity(passenger.vector,neighbor.vector,columns)
neighbor.vector
columns
passenger.filtered
neighbor.vector[,c(colnames(passenger.filtered))]
neighbor.vector = head(df.train,1)
neighbor.vector[,c(columns)]
neighbor.vector[,columns]
columns
factor(columns)
neighbor.vector[,c(columns)]
columns = c("Pclass", "Sex", "Age", "Sibsp", "Parch", "Fare", "Embarked")
neighbor.vector[,columns]
columns
c(columns)
columns = ["Pclass", "Sex", "Age", "Sibsp", "Parch", "Fare", "Embarked"]
columns = c("Pclass", "Sex", "Age", "Sibsp", "Parch", "Fare", "Embarked")
colnames(neighbor.vector)
columns = colnames(neighbor.vector[c(-1,-2,-4,-9])
columns = colnames(neighbor.vector[c(-1,-2,-4,-9)]
)
columns
neighbor.vector[,c(columns)]
columns
columns = c("Pclass","Sex" ,"Age" , "SibSp" ,"Parch" ,"Fare",     "Cabin",    "Embarked")
neighbor.vector[,c(columns)]
source('~/CSCI 183/HW2/hw2.r')
neighbor.vector = head(df.train,1)
passenger.vector= head(df.test,1)
cosineSimilarity(passenger.vector,neighbor.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
df.train[,c("Sex")]
df.train$Sex
df.train$Sex = as.numeric(df.train$Sex)
df.train$Sex
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,neighbor.vector,columns)
columns
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,neighbor.vector,columns)
cosineSimilarity(passenger.vector,neighbor.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
df.train$Embarked
as.numberic(df.train$Embarked)
as.numeric(df.train$Embarked)
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
neighbor.vector = head(df.train,1)
passenger.vector = head(df.test,1)
cosineSimilarity(neighbor.vector,passenger.vector,columns)
dist(rbind(neighbor.vector,passenger.vector))
dist(rbind(neighbor.filtered,passenger.filtered))
neighbor.filtered
source('~/.active-rstudio-document')
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
dist(rbind(neighbor.filtered,passenger.filtered))
passenger.filtered = passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered = neighbor.vector[,c(colnames(passenger.filtered))]
neighbor.filtered
columns
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/.active-rstudio-document')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(neighbor.vector,passenger.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
df.train
passenger.vector = head(df.test,1)
apply(df.train, 1, cosineSimilarity(passenger.vector,df.train))
apply(df.train, 1, cosineSimilarity(passenger.vector,df.train,columns))
out = apply(df.train, 1, cosineSimilarity(passenger.vector,df.train,columns))
apply(df.train, 1, cosineSimilarity(passenger.vector,df.train,columns))
apply(df.train[1], 1, cosineSimilarity(passenger.vector,df.train,columns))
df.train[1]
df.train[1,]
apply(df.train[1,], 1, cosineSimilarity(passenger.vector,df.train,columns))
cosineSimilarity(passenger.vector,neighbor.vector,columns)
cosineSimilarity(passenger.vector,df.train[2,],columns)
cosineSimilarity(passenger.vector,df.train[3,],columns)
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
source('~/CSCI 183/HW2/hw2.r')
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
source('~/CSCI 183/HW2/hw2.r')
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
source('~/CSCI 183/HW2/hw2.r')
apply(df.train, 1, cosineSimilarity(passenger.vector,neighbor.vector,columns))
apply(df.train, 1, FUN=cosineSimilarity(passenger.vector,neighbor.vector,columns))
apply(df.train, 1, cosineSimilarity(passenger.vector,df.train,columns))
for (i in 1:nrows(df.test)) {}
for(j in 1:nrow(df.train)){
out = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
}
for(j in 1:nrow(df.train)){
out = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
out
for(j in 1:nrow(df.train)){
out[j,] = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
out = data.frame
out
out = data.frame()
out
out = data.frame(rows = nrow(df.train))
out
out = data.frame()
for(j in 1:nrow(df.train)){
out[j,] = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
out
summary(out)
for(j in 1:nrow(df.train)){
out[j,1] = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
out
max(out$V1)
cosineSimilarity(passenger.vector,df.train[889,],columns)
df.train[889,] * passenger.vector
df.train[889,] * passenger.filtered
cosineSimilarity(passenger.vector,df.train[889,],columns)
cosineSimilarity(passenger.vector,df.train[889,],columns)
cosineSimilarity(passenger.vector,df.train[889,],columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
neighbor.filtered
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
neighbor.filtered
neighbor.vector = df.train(889,)
neighbor.vector = df.train[889,]
passenger.filtered <- passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered <- neighbor.vector[,c(colnames(passenger.filtered))]
passenger.filtered
neighbor.filtered
passenger.filtered = passenger.filtered[,c(columns)]
neighbor.vector = neighbor.vector[,c(columns)]
passenger.vector = passenger.vector[,c(columns)]
passenger.filtered <- passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered <- neighbor.vector[,c(colnames(passenger.filtered))]
print(passenger.filtered)
print(neighbor.filtered)
sum(neighbor.filtered*passenger.filtered)
neighbor.filered*passenger.filtered
neighbor.filtered*passenger.filtered
neighbor.filtered = neighbor.filtered[,!apply(is.na(passenger.vector),2,all))]
neighbor.filtered = neighbor.filtered[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered = neighbor.filtered[,!apply(is.na(neighbor.vector),2,all)]
neighbor.filtered = neighbor.vector[,!apply(is.na(neighbor.vector),2,all)]
passenger.filtered = passenger.vector[,!apply(is.na(passenger.vector),2,all)]
neighbor.filtered
intersect(colnames(neighbor.filtered), colnames(vector.filtered))
intersect(colnames(neighbor.filtered), colnames(passenger.filtered))
cosineSimilarity(passenger.vector,df.train[889,],columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
cosineSimilarity(passenger.vector,df.train[889,],columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,df.train[889,],columns)
for(j in 1:nrow(df.train)){
out[j,] = cosineSimilarity(passenger.vector,df.train[j,],columns)
}
out
max(out)
max(out$V1)
out[out$V1 > .90]
out[V1 > .90]
out[out$V1 > .90]
subset(out, out$V1 > .90)
subset(out, out$V1 > .95)
subset(out, out$V1 > .99)
subset(out, out$V1 > .999)
subset(out, out$V1 > .9999)
subset(out, out$V1 > .90)
nrow(subset(out, out$V1 > .90))
most_similar = subset(out,out$V1 > .90)
for(j in 1:nrow(df.train)){
out[j,1] = cosineSimilarity(passenger.vector,df.train[j,],columns)
out[j,2] = df.train[j,]$Survived
}
out
subset(out, out$V1 > .90)
most_similar = subset(out, out$V1 > .90)
mean(most_similar$V1 * most_similar$V2)
mean(most_similar$V1 * as.numeric(most_similar$V2))
most_similar$V1 * as.numeric(most_similar$V2)
most_similar$V1[1] * as.numeric(most_similar$V2[1])
most_similar[1]
most_similar$V1[1] * as.numeric(most_similar$V2[1])
most_similar$V1[1]
most_similar$V1[1,]
most_similar$V1[,1]
most_similar[1,]
as.numeric(most_similar$V2)
as.numeric(most_similar$V2, c(0,1))
as.numeric(levels(most_similar$V2))
as.numeric(levels(most_similar$V2))[most_similar$V2]
mean(most_similar$V1 * as.numeric(levels(most_similar$V2))[most_similar$V2])
typeof(df.train[1]$Survived)
typeof(df.train[1])
df.train[1,]$Survived
typeof(df.train[1,]$Survived)
typeof(out[1,]$V2)
typeof(most_similar$V2)
for(j in 1:nrow(df.train)){
for(j in 1:nrow(df.train)){
out[j,1] = cosineSimilarity(passenger.vector,df.train[j,],columns)
out[j,2] = df.train[j,]$Survived
}
out
round(.2)
round(.6)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
head(warnings())
clear
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
warnings
warnings()
cosineSimilarity(passenger.vector,neighbor.vector,columns)
source('~/.active-rstudio-document')
cosineSimilarity(passenger.vector,neighbor.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
cosineSimilarity(passenger.vector,neighbor.vector,columns)
source('~/CSCI 183/HW2/hw2.r')
print(paste("Passenger ", 1))
source('~/CSCI 183/HW2/hw2.r')
passenger.vector = df.test[13,]
passenger.vector
cosineSimilarity(passenger.vector,neighbor.vector,columns)
test_for <- function(passenger.vector, df.train, columns){for(j in 1:nrow(df.train)){
out[j,1] = cosineSimilarity(passenger.vector,df.train[j,],columns)
out[j,2] = df.train[j,]$Survived
}
test_For(passenger.vector,df.train,columns)
test_for <- function(passenger.vector, df.train, columns){for(j in 1:nrow(df.train)){
out[j,1] = cosineSimilarity(passenger.vector,df.train[j,],columns)
out[j,2] = df.train[j,]$Survived
}}
test_For(passenger.vector,df.train,columns)
test_for(passenger.vector,df.train,columns)
test_for(passenger.vector,df.train,columns)
source('~/CSCI 183/HW2/hw2.r')
test_for(passenger.vector,df.train,columns)
source('~/CSCI 183/HW2/hw2.r')
test_for(passenger.vector,df.train,columns)
out
source('~/CSCI 183/HW2/hw2.r')
nrow(predictions)
head(predictions)
predictions
predictions.values
predictions[1,]
predicitons[1,]$Survived = 0
predictions[1,]$Survived = 0
predictions$Survived
predictions$Survived = 0
predictions
predictions[418,]$Survived = 1
predictions[418]$Survived = 1
predictions$Survived[418] = 1
predictions
predictions$Survived = NULL
predictions$Survived[418] = 1
predictions
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
df.test$PassengerID[2]
df.test
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
similarities$Similar[1] = .89
similarities
source('~/CSCI 183/HW2/hw2.r')
View(similarities)
View(most_similar)
View(most_similar)
source('~/CSCI 183/HW2/hw2.r')
source('~/CSCI 183/HW2/hw2.r')
predictions
similarities
most_similar = subset(similarities, similarities$Similar >.9)
most_similar
most_similar = subset(similarities, similarities$Similar >.9)
most_similar
as.numeric(levels(most_similar$Survived))[most_similar$Survived]
source('~/CSCI 183/HW2/hw2.r')
head(warnings())
predictions
df.train$Survived
typeof(df.train$Survived)
source('~/CSCI 183/HW2/hw2.r')
predictions
predictions$Survived - 1
source('~/CSCI 183/HW2/hw2.r')
min(predicted$Survived)
min(predictions$survived)
max(predicted$Survived)
max(predictions$Survived)
min(predictions$Survived)
predictions$Survived <- predictions$Survived - 1
max(predictions$Survived)
write.csv(predictions, file="CosineSimilarityModel.csv", row.names= FALSE)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=df.train, family=binomial)
fit
predict(fit, df.test)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data=df.train, family=binomial)
predict(fit, df.test)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data=df.train, family=binomial, na.action = 0)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data=df.train, family=binomial, na.action = 0)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data=df.train, family=binomial)
predict(fit, df.test, na.action = 0)
predict(fit,df.test)
predict(fit,df.test, na.action=0)
predict(fit,df.test, na.action=c(0))
predict(fit,df.test, na.action=na.pass)
predict(fit,df.test, type= c('response'), na.action=na.pass)
p-> predict(fit,df.test, type= c('response'), na.action=na.pass)
p <- predict(fit,df.test, type= c('response'), na.action=na.pass)
for (i in 1:418){
if(p[i] > .75) {}
}
for (i in 1:418){
if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
p[1]
for (i in 1:418){
if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
for (i in 1:418){
if(p[i] > .75 == TRUE) {
predictions$Survived[p] = 1
}
}
for (i in 1:418){
if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
for (i in 1:418) {
if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
for (i in 1:418) {
if (is.na(p[i])){
predictied$Survived[p] = 0
}
else if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
for (i in 1:418) {
if (is.na(p[i])){
predictions$Survived[p] = 0
}
else if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
predictions$Survived
hist(predictions)
hist(predictions$Survived)
hist(predictions$Survived/sum(predictions$Survived))
write.csv(predictions, file="GLMModel.csv", row.names= FALSE)
predictionsCosine = read.csv("CosineSimilarityModel")
predictionsCosine = read.csv("CosineSimilarityModel.csv")
predictionsCosine  == predictions
predictions$Survived = NULL
for (i in 1:418) {
if (is.na(p[i])){
predictions$Survived[p] = 0
}
else if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
predictions
predictions$Survived = numeric(418)
predictions
for (i in 1:418) {
if (is.na(p[i])){
predictions$Survived[p] = 0
}
else if(p[i] > .75) {
predictions$Survived[p] = 1
}
}
predictions
predictionsCosine  == predictions
write.csv(predictions, file="GLMModel.csv", row.names= FALSE)
